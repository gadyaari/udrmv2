/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.WidevineCencHeader', null, global);
goog.exportSymbol('proto.WidevineCencHeader.Algorithm', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WidevineCencHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WidevineCencHeader.repeatedFields_, null);
};
goog.inherits(proto.WidevineCencHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WidevineCencHeader.displayName = 'proto.WidevineCencHeader';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WidevineCencHeader.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WidevineCencHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.WidevineCencHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WidevineCencHeader} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WidevineCencHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    algorithm: jspb.Message.getField(msg, 1),
    keyIdList: msg.getKeyIdList_asB64(),
    provider: jspb.Message.getField(msg, 3),
    contentId: msg.getContentId_asB64(),
    trackType: jspb.Message.getField(msg, 5),
    policy: jspb.Message.getField(msg, 6),
    cryptoPeriodIndex: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WidevineCencHeader}
 */
proto.WidevineCencHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WidevineCencHeader;
  return proto.WidevineCencHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WidevineCencHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WidevineCencHeader}
 */
proto.WidevineCencHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WidevineCencHeader.Algorithm} */ (reader.readEnum());
      msg.setAlgorithm(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getKeyIdList().push(value);
      msg.setKeyIdList(msg.getKeyIdList());
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContentId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrackType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPolicy(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCryptoPeriodIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.WidevineCencHeader} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WidevineCencHeader.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WidevineCencHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.WidevineCencHeader.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAlgorithm();
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getKeyIdList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = this.getProvider();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getContentId_asU8();
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getTrackType();
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getPolicy();
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getCryptoPeriodIndex();
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.WidevineCencHeader} The clone.
 */
proto.WidevineCencHeader.prototype.cloneMessage = function() {
  return /** @type {!proto.WidevineCencHeader} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Algorithm algorithm = 1;
 * @return {proto.WidevineCencHeader.Algorithm}
 */
proto.WidevineCencHeader.prototype.getAlgorithm = function() {
  return /** @type {proto.WidevineCencHeader.Algorithm} */ (jspb.Message.getField(this, 1));
};


/** @param {proto.WidevineCencHeader.Algorithm|undefined} value  */
proto.WidevineCencHeader.prototype.setAlgorithm = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.WidevineCencHeader.prototype.clearAlgorithm = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * repeated bytes key_id = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.WidevineCencHeader.prototype.getKeyIdList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 2));
};


/**
 * repeated bytes key_id = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getKeyIdList()`
 * @return {!Array.<string>}
 */
proto.WidevineCencHeader.prototype.getKeyIdList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getKeyIdList()));
};


/**
 * repeated bytes key_id = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyIdList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.WidevineCencHeader.prototype.getKeyIdList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getKeyIdList()));
};


/** @param {(Array<!Uint8Array>|Array<string>)|undefined} value  */
proto.WidevineCencHeader.prototype.setKeyIdList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.WidevineCencHeader.prototype.clearKeyIdList = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * optional string provider = 3;
 * @return {string?}
 */
proto.WidevineCencHeader.prototype.getProvider = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.WidevineCencHeader.prototype.setProvider = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.WidevineCencHeader.prototype.clearProvider = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * optional bytes content_id = 4;
 * @return {(string|Uint8Array)}
 */
proto.WidevineCencHeader.prototype.getContentId = function() {
  return /** @type {(string|Uint8Array)} */ (jspb.Message.getField(this, 4));
};


/**
 * optional bytes content_id = 4;
 * This is a type-conversion wrapper around `getContentId()`
 * @return {string?}
 */
proto.WidevineCencHeader.prototype.getContentId_asB64 = function() {
  return /** @type {string?} */ (jspb.Message.bytesAsB64(
      this.getContentId()));
};


/**
 * optional bytes content_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContentId()`
 * @return {Uint8Array}
 */
proto.WidevineCencHeader.prototype.getContentId_asU8 = function() {
  return /** @type {Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContentId()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.WidevineCencHeader.prototype.setContentId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.WidevineCencHeader.prototype.clearContentId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * optional string track_type = 5;
 * @return {string?}
 */
proto.WidevineCencHeader.prototype.getTrackType = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 5));
};


/** @param {string?|undefined} value  */
proto.WidevineCencHeader.prototype.setTrackType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.WidevineCencHeader.prototype.clearTrackType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * optional string policy = 6;
 * @return {string?}
 */
proto.WidevineCencHeader.prototype.getPolicy = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 6));
};


/** @param {string?|undefined} value  */
proto.WidevineCencHeader.prototype.setPolicy = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.WidevineCencHeader.prototype.clearPolicy = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * optional uint32 crypto_period_index = 7;
 * @return {number?}
 */
proto.WidevineCencHeader.prototype.getCryptoPeriodIndex = function() {
  return /** @type {number?} */ (jspb.Message.getField(this, 7));
};


/** @param {number?|undefined} value  */
proto.WidevineCencHeader.prototype.setCryptoPeriodIndex = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.WidevineCencHeader.prototype.clearCryptoPeriodIndex = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * @enum {number}
 */
proto.WidevineCencHeader.Algorithm = {
  UNENCRYPTED: 0,
  AESCTR: 1
};

goog.object.extend(exports, proto);
